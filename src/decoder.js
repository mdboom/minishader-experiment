const inferno = new Uint8Array([186, 54, 85, 188, 55, 84, 189, 56, 83, 191, 56, 82, 192, 57, 81, 194, 58, 80, 195, 59, 79, 197, 60, 78, 198, 61, 77, 199, 62, 76, 201, 63, 75, 202, 64, 74, 203, 65, 73, 205, 66, 72, 206, 67, 71, 207, 68, 70, 209, 69, 69, 210, 70, 68, 211, 71, 67, 213, 72, 65, 214, 73, 64, 215, 74, 63, 216, 76, 62, 217, 77, 61, 219, 78, 60, 220, 79, 59, 221, 81, 57, 222, 82, 56, 223, 83, 55, 224, 85, 54, 225, 86, 53, 226, 87, 51, 227, 89, 50, 228, 90, 49, 229, 91, 48, 230, 93, 47, 231, 94, 45, 232, 96, 44, 233, 97, 43, 234, 99, 42, 235, 100, 40, 236, 102, 39, 237, 103, 38, 237, 105, 37, 238, 106, 35, 239, 108, 34, 240, 110, 33, 241, 111, 32, 241, 113, 30, 242, 114, 29, 243, 116, 28, 243, 118, 26, 244, 119, 25, 244, 121, 24, 245, 123, 22, 246, 125, 21, 246, 126, 20, 247, 128, 18, 247, 130, 17, 248, 132, 16, 248, 133, 14, 248, 135, 13, 249, 137, 12, 249, 139, 11, 250, 141, 9, 250, 142, 8, 250, 144, 8, 251, 146, 7, 251, 148, 6, 251, 150, 6, 251, 152, 6, 252, 153, 6, 252, 155, 6, 252, 157, 6, 252, 159, 7, 252, 161, 7, 252, 163, 8, 252, 165, 10, 252, 167, 11, 252, 169, 13, 252, 170, 14, 252, 172, 16, 252, 174, 18, 252, 176, 20, 252, 178, 22, 252, 180, 24, 252, 182, 26, 252, 184, 28, 252, 186, 30, 251, 188, 33, 251, 190, 35, 251, 192, 37, 251, 194, 40, 250, 196, 42, 250, 198, 45, 250, 200, 47, 249, 202, 50, 249, 204, 52, 249, 206, 55, 248, 208, 58, 248, 210, 61, 247, 212, 63, 247, 214, 66, 246, 216, 69, 246, 217, 73, 245, 219, 76, 245, 221, 79, 244, 223, 82, 244, 225, 86, 244, 227, 89, 243, 229, 93, 243, 231, 97, 242, 233, 101, 242, 234, 105, 242, 236, 109, 242, 238, 113, 242, 239, 117, 242, 241, 121, 242, 243, 125, 243, 244, 130, 243, 245, 134, 244, 247, 138, 245, 248, 142, 246, 249, 146, 247, 251, 150, 248, 252, 154, 249, 253, 157, 251, 254, 161, 253, 255, 165]);

export function decompressFrame(data, nframes, height, width, iframe, output, cmap, alpha=255) {
    if (iframe >= nframes) {
        return;
    }
    const view = new DataView(data.buffer);
    const offset = view.getUint32(12 + iframe * 4, false);
    const input = new Uint8Array(data.buffer, offset);
    let i = 0;
    let j = 0;
    let size = height * width * 4;
    let values = {};
    while (j < size) {
        var x = input[i++];
        if (x & 0x80) {
            x = x & 0x7f;
            values[x] = cmap[(x * 3)];
            for (var k = 0; k < 3; ++k) {
                output[j++] = cmap[(x * 3) + k];
            }
            output[j++] = alpha;
        } else {
            for (var k = 0; k < x * 4; ++k) {
                output[j++] = 0x00;
            }
        }
    }
}